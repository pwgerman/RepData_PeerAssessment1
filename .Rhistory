plot(density(spam$your[spam$type=="nonspam"]), col="blue")
plot(density(spam$your[spam$type=="nonspam"]), col="red")
plot(density(spam$your[spam$type=="nonspam"]), col="blue")
plot(density(spam$your[spam$type=="nonspam"]), col="blue", main="")
plot(density(spam$your[spam$type=="nonspam"]), col="blue")
plot(density(spam$your[spam$type=="nonspam"]), col="blue", main="")
plot(density(spam$your[spam$type=="nonspam"]), col="blue", main="", xlab="Frequency of 'you'")
plot(density(spam$your[spam$type=="nonspam"]), col="blue", main="", xlab="Frequency of 'your'")
lines(density(spam$your[spam$type==]))
lines(density(spam$your[spam$type=="spam"]))
lines(density(spam$your[spam$type=="spam"])), col='red')
lines(density(spam$your[spam$type=="spam"]), col='red')
help
exit
quit
source('~/.active-rstudio-document')
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
install.packages("caret")
library(caret)
install.packages("ggplot2")
library(caret)
set.seed(975)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
testing = mixtures[-inTrain,]
training = mixtures[ inTrain,]
training[[1]]
training
training$CompressiveStrength
length(training)
length(training$CompressiveStrength)
dim(training)
hist(training$CompressiveStrength)
min(training$CompressiveStrength)
clear
clear all
clear *
clear ~.
length(training)
size(training)
length(training$Superplasticizer)
hist(training$Superplasticizer)
min(training$Superplasticizer)
length(training$Superplasticizer = 0)
length(training$Superplasticizer[0])
length(training$Superplasticizer[1])
length(training$Superplasticizer[2])
training$Superplasticizer
training
training[1]
training[[1]]
training$CompressiveStrength
plot(training$Com)
plot(training$CompressiveStrength)
plot(training$Superplasticizer)
training$CompressiveStrength[1:9]
plot(training$CompressiveStrength)
training$CompressiveStrength[300:309]
training$CompressiveStrength[600:609]
library(Hmisc)
install(Hmisc)
install.packages("Hmisc")
stat.desc(training)
describe(training)
library(Hmisc)
describe(training)
traincut <- cut2(training, c(200,400, 600))
traincut <- cut2(training$CompressiveStrength, c(200,400, 600))
length(traincut)
plot(traincut)
traincut[1:10]
table(traincut)
traincut <- cut2(training$CompressiveStrength, g=4)
table(traincut)
length(traincut)
hist(traincut)
hist(traincut[[1]])
traincut
plot(training$CompressiveStrength)
points(training$CompressiveStrength), pch=16, col="green")
points(training$CompressiveStrength, pch=16, col="green")
points(training$CompressiveStrength, col="blue")
describe(training)
hist(traincut[[1]])
points(traincut)
points(traincut[1])
points(traincut[1], col="red")
points(traincut$1, col="red")
featurePlot(x=training[,c("CompressiveStrength","SuperPlasticizer")], y= training$CoarseAggregate, plot="pairs")
featurePlot(x=training[c("CompressiveStrength","SuperPlasticizer")], y= training$CoarseAggregate, plot="pairs")
library(ISLR)
install.packages(ISLR)
install.packages("ISLR")
library(ISLR)
data(wage)
data(Wage)
summary(Wage)
summary(training)
featurePlot(x=training[,c("CompressiveStrength","Superplasticizer")], y= training$CoarseAggregate, plot="pairs")
featurePlot(x=training[,c("CompressiveStrength","Superplasticizer","CoarseAggregate", "FlyAsh")], y= training$CoarseAggregate, plot="pairs")
points(traincut$1, col="red")
points(traincut)
plot(traincut)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength)
length(training)
summary(training)
plot(training$FlyAsh)
plot(training$CompressiveStrength)
qplot(CompressiveStrength, FlyAsh, data=training)
library(ggplot2)
qplot(CompressiveStrength, FlyAsh, data=training)
ggplot(training$CompressiveStrength)
training
training$CompressiveStrength
length(training)
length(training$CompressiveStrength)
range(1:length(training$CompressiveStrength))
range(1:1:length(training$CompressiveStrength))
range(1:1:length(training$CompressiveStrength:1))
range(1:length(training$CompressiveStrength:1))
help
help range
plot(training$CompressiveStrength)
plot(training$CompressiveStrength, col=data$FlyAsh)
plot(training$CompressiveStrength, col=cut2(data$FlyAsh)
plot(training$CompressiveStrength, col=cut2(data$FlyAsh, g=4)
)
library(Hmisc)
plot(training$CompressiveStrength, col=cut2(data$FlyAsh, g=4))
plot(training$CompressiveStrength, col<-cut2(data$FlyAsh, g=4))
plot(training$CompressiveStrength, col=traincut)
traincut <- cut2(training, c(200,400, 600))
traincut <- cut2(training$CompressiveStrength, c(200,400, 600))
plot(training$CompressiveStrength, col=traincut)
plot(training$CompressiveStrength, col=traincut)
plot(training$CompressiveStrength, col=cut2(data$FlyAsh, g=4))
plot(training$CompressiveStrength, col<-cut2(data$FlyAsh, g=4))
plot(training$CompressiveStrength, col=traincut)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength, col=traincut)
traincut
traincut <- cut2(training, g=4
)
traincut <- cut2(training, g=4)
lenth(training)
length(training)
dim(training)
traincut <- cut2(training$CompressiveStrength, g=4)
plot(training$CompressiveStrength, col=traincut)
traincut <- cut2(training$CompressiveStrength, g=4)
plot(training$CompressiveStrength, col=traincut)
plot(training$FlyAsh, col=traincut)
plot(training$Superplasticizer, col=traincut)
ls
ls()
names(training)
plot(training$Age, col=traincut)
plot(training$FineAggregate, col=traincut)
plot(training$BlastFurnaceSlag, col=traincut)
plot(training$CompressiveStrength, col=traincut)
plot(training$Cement, col=traincut)
plot(training$CoarseAggregate, col=traincut)
plot(training$Water, col=traincut)
plot(mixtures$CompressiveStrength)
plot(training$CompressiveStrength)
plot(mixtures$CompressiveStrength)
csv.get()
pwd
pml.training <- read.csv("~/Documents/Courses/My_Assignments/pml-training.csv")
View(pml.training)
names
names(pml.training)
pml.training$classe[1:4]
pml.training$classe[1:20]
pml.training$classe[501:520]
pml.training$classe[701:720]
pml.training$classe[901:920]
min(pml.training$classe)
table(pml.training$classe)
View(pml.training$classe)
5580 + 3797 + 3422 + 3216 + 3607
pml.training$classe[1901:1920]
pml.training$classe[19001:19020]
seq(1:4)
apply(pml.training, 2, table)
?count
??count
?is
length(pml.training)
length(pml.training$classe)
length(pml.training$raw_timestamp_part_1)
length(pml.training$user_name)
table(pml.training$user_name)
table(pml.training$kurtosis_roll_belt)
length(pml.training$kurtosis_roll_belt)
length(complete.cases(pml.training$kurtosis_roll_belt))
plot(training$CompressiveStrength, col=traincut)
names(training)
? qplot
qplot(CompressionStrength, Age, data=training, color=traincut)
summary(Wage)
summary(training)
summary(traincut)
qplot(CompressiveStrength, Age, data=training, color=traincut)
qplot(CompressiveStrength, Age, data=training, color=cut2(training$CompressiveStrength, g=10))
qplot(CompressiveStrength, Age, data=training, color=cut2(training$Age, g=10))
qplot(CompressiveStrength, Age, data=training, color=cut2(training$FlyAsh, g=10))
qplot(CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=10))
qplot(CompressiveStrength, seq(1:length(training$CompressiveStrength)) data=training, color=cut2(training$FlyAsh, g=10))
seq(1:length(training$CompressiveStrength))
length(seq(1:length(training$CompressiveStrength)))
qplot(CompressiveStrength, seq(1:length(training$CompressiveStrength)), data=training, color=cut2(training$FlyAsh, g=10))
qplot(CompressiveStrength, seq(1:length(training$CompressiveStrength)), data=training, color=cut2(training$Age, g=10))
names(training)
qplot(CompressiveStrength, seq(1:length(training$CompressiveStrength)), data=training, color=cut2(training$Cement, g=10))
qplot(CompressiveStrength, seq(1:length(training$CompressiveStrength)), data=training, color=cut2(training$Water, g=10))
qplot(CompressiveStrength, seq(1:length(training$CompressiveStrength)), data=training, color=cut2(training$CoarseAggregate, g=10))
qplot(CompressiveStrength, seq(1:length(training$CompressiveStrength)), data=training, color=cut2(training$BlastFurnaceSlag, g=10))
qplot(CompressiveStrength, seq(1:length(training$CompressiveStrength)), data=training, color=cut2(training$FineAggregate, g=10))
qplot(CompressiveStrength, seq(1:length(training$CompressiveStrength)), data=training, color=cut2(training$Superplasticizer, g=10))
?seq
?c
qplot(CompressiveStrength, Age, data=training, color=traincut)
library(Hmisc)
plot(training$CompressiveStrength, col=traincut)
qplot(CompressiveStrength, Age, data=training, color=traincut)
library(caret)
qplot(CompressiveStrength, Age, data=training, color=traincut)
hist(training$Superplasticizer)
log(1)
log(3)
log(0.1)
log(0.0000001)
log(0)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
names(training$IL*)
names(training[1])
names(training[2])
names(training[58-69])
names(training[58:69])
ILdata <- training[58:69]
names(ILdata)
names(spam)
library(kernlab)
data(spam)
set.seed(333)
names(spam)
name(spam([58]))
name(spam[58])
names(spam[58])
names(training)
names(training[-1])
training[,-1]
training[,-1]+1
log10(training[,-1])
names(preproc)
preproc <- preProcess(training[,-1], method="pca", pcaComp=2)
preproc <- preProcess(ILdata, method="pca", pcaComp=2)
names(preproc)
names(preproc$pcaComp)
preproc$numComp
preproc$pcaComp
preproc$data
ILpc <- predict(preproc, ILdata)
plot(ILpc[,1], ILpc[,2])
preproc <- preProcess(log10(ILdata+1), method="pca", pcaComp=2)
preproc <- preProcess(log10(ILdata), method="pca", pcaComp=2)
featurePlot(x=ILdata, y=training$diagnosis, plot="pairs")
training$diagnosis
hist(ILdata[,1])
ILdata[,1]
hist(ILdata[,2])
hist(ILdata[,3])
hist(ILdata[,4])
hist(ILdata[,5])
hist(ILdata[,6])
hist(ILdata[,7])
hist(ILdata[,8])
hist(ILdata[,9])
hist(ILdata[,10])
hist(ILdata[,11])
hist(ILdata[,12])
hist(ILdata[,13])
hist(ILdata[,1])
qplot(diagnosis, ILdata[,1], data=ILdata)
names(ILdata)
qplot(IL_13, IL_11, data=ILdata)
qplot(IL_5, IL_11, data=ILdata)
qplot(IL_5, IL_4, data=ILdata)
qplot(IL_5, IL_4, colour=IL_16, data=ILdata)
modfit <- train(IL_11 ~ IL_13 + IL_16, method="lm", data=ILdata)
finMod <- modfit$finalModel
print(modfit)
plot(finMod,1,pch=19,cex=0.5)
plot(finMod$residuals, pch=19)
modFitAll <- train(IL_11 ~ .,data=ILdata, method="lm")
print(modFilAll)
print(modFitAll)
ILtesting <- testing[58:69]
pred <- predict(modFitAll, ILtesting)
qplot(IL_11, pred, data=ILtesting)
names(ILdata)
ILlist <- c(IL_11,IL_13,IL_16,IL_17E,IL_1alpha,  IL_3,IL_4,IL_5,IL_6,IL_6_Receptor,IL_7,IL_8)
ILlist <- c("IL_11",         "IL_13",         "IL_16",         "IL_17E",        "IL_1alpha",    "IL_3",          "IL_4",          "IL_5",          "IL_6",          "IL_6_Receptor", "IL_7",          "IL_8")
ILlist
modFitAll <- train(IL_11 ~ ILlist,data=ILtraining, method="lm")
modFitAll <- train(IL_11 ~ ILlist,data=training, method="lm")
names(training)
58:62
c(1,58:62)
ILdata1 <- training[c(1,58:69)]
names(ILdata1)
ILdata <- training[c(1,58:69)]
hist(ILdata[,1])  # notice most variables are fairly normal, all numeric
hist(ILdata[,2])  # notice most variables are fairly normal, all numeric
modelFit <- train(diagnosis ~ ., data=ILdata, method="glm")
names(ILdata)
modelFit1 <- train(diagnosis ~ ., data=ILdata, method="glm")
set.seed(233)
modelFit1 <- train(diagnosis ~ ., data=ILdata, method="glm")
modFitAll <- train(IL_11 ~ ILlist ,data=training, method="lm")
modFitAll <- train(IL_11 ~ .,data=ILdata, method="lm")
modelFit1 <- train(diagnosis ~ ., data=ILdata, method="glm")
modFitAll <- train(IL_11 ~ .,data=ILdata, method="glm")
clear
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
spam[1:10,1_]
spam[1:10,1]
spam[1,1:10]
dim(spam)
summary(spam)
training <- spam[inTrain,]
testing <- spam[-inTrain]
modelFit <- train(type ~.,data=training, method="glm")
modelFit <- train(type ~.,data=training, method="glm")
install.packages('e1071', dependencies=TRUE)
modelFit <- train(type ~.,data=training, method="glm")
warnings()
names(training)
hist(training$type)
q
ls
ls(spam)
help
help(spam)
help(c)
help(cbind)
help(names)
help(apply)
help(sweep)
help(table)
help(which)
help(cor)
help(quantile)
help(header)
help(qqnorm)
levels(factor(training$type))
factor(training$type))
factor(training$type)
training$type
levels(training$type)
unique(training$type)
help(unique)
names(table(training$type))
apropos('plot')
modelFit <- train(type ~.,data=training, method="glm")
warnings()
help(glm)
mod2 <- glm(type ~ training)
mod2 <- glm(type ~ .)
mod2 <- glm(type ~ ., data=training)
modelFit <- train(type ~.,data=training, method="glm")
args(train.default)
args(trainControl)
modelFit
modelFit2 <- train(type ~., data=training, method="glm")
install.packages("shiny")
exit
whos
ls()
summary(cars)
install.packages("knitr")
getwd()
setwd("~/Src/R/Repro_Research_coursera/")
list.files()
setwd("~/Src/R/Repro_Research_coursera/RepData_PeerAssessment1/")
list.files()
getwd()
help(read.csv)
read.csv("activity.csv", header = TRUE)
activity <- read.csv("activity.csv", header = TRUE)
ls()
class(activity)
str(activity)
summary(activity)
good <- complete.cases(activity)
summary(activity[good, ]
good <- complete.cases(activity)
summary(activity[good, ]
)
colnames(activity)
mean(activity$steps)
mean(activity$steps[good, ])
dim(activity$steps)
str(activity$steps)
mean(activity[good, steps])
mean(activity[good, "steps"])
str(activity[good, "steps"])
summary(activity[good, "steps"])
colnames(activity)
unique(activity$date)
gl(3,10)
tapply(activity[good, steps], activity[good, date], mean )
summary(activity[good, steps])
summary(activity[good, "steps"])
summary(activity[good, "date"])
tapply(activity[good, "steps"], activity[good, "date"], mean )
tapply(activity[good, "steps"], activity[good, "date"], sum )
day_activity <- tapply(activity[good, "steps"], activity[good, "date"], sum )
summary(day_activity)
colnames(day_activity)
str(day_activity)
class(day_activity)
dim(day_activity)
day_activity[1:3]
lapply(split(activity[good, "steps"], activity[good, "date"]), mean)
activity[good, ]
day_activity <- tapply(activity[good, "steps"], activity[good, "date"], sum )
day_activity
mean(complete.cases(day_activity))
complete.cases(day_activity)
mean(day_activity[complete.cases(day_activity)])
hist(day_activity[complete.cases(day_activity)])
hist(day_activity[complete.cases(day_activity)], br=20)
hist(day_activity[complete.cases(day_activity)], br=62)
hist(day_activity[complete.cases(day_activity)], br=61)
hist(day_activity[complete.cases(day_activity)], br=10)
colnames(activity)
help(max)
which.max(time_activity)
time_activity <- tapply(activity[good, "steps"], activity[good, "interval"], sum )
which.max(time_activity)
help(which.max)
max_time <- which.max(time_activity)
max_time
max_time[2]
max_time[2,]
max_time[,2]
max_time[2]
max_time
dim(max_time)
activity[104, "interval"]
activityNew <- activity
summary(activity)
summary(activity[good, ])
summary(activity[!good, ])
activityTmp <- activity
help(gl)
dim(time_activity)
dim(activity$interval)
dim(activity[,"interval"])
dim(activity[ ,"interval"])
class(activity[ ,"interval"])
str(activity[ ,"interval"])
factors(activity$date)
levels(activity$date)
61*281
str(activity[ ,"interval"])
dim(activity[ ,"interval"])
dim(time_activity)
61*288
help(count)
levels(activity$date)
sum(levels(activity$date))
dim(levels(activity$date))
str(levels(activity$date))
size(levels(activity$date))
help(dim)
nrow(levels(activity$date))
ncol(levels(activity$date))
dim(time_activity)
str(levels(activity$date))
num_dates <- 61
new_steps <- rep(time_activity, times = num_dates)
dim(new_steps)
str(new_steps)
class(new_steps)
summary(activityTmp)
activitytmp$steps <- new_steps
activityTmp$steps <- new_steps
summary(activityTmp)
activityNew[!good, ] = new_steps[!good, ]
activityNew[!good, ] = activityTmp[!good, ]
